name: CI/CD

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }} # owner/repo
  # For tags
  VERSION: ${{ github.sha }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write    # For push to GHCR
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node (for build/test)
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Enable pnpm
        run: |
          corepack enable
          corepack prepare pnpm@latest --activate

      - name: Install
        run: pnpm install --frozen-lockfile
        
      - name: Test (unit)
        run: pnpm test
        continue-on-error: true # If you want test failure not to prevent deployment, hold
      
      - name: Test (e2e)
        run: pnpm test:e2e
        continue-on-error: true # If you want test failure not to prevent deployment, hold

      - name: Build Nest
        run: pnpm build

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=raw,value=${{ env.VERSION }}

      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Upload compose and necessary files to the server
      - name: Upload docker-compose to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: |
            docker-compose.deploy.yml
          target: /home/${{ secrets.SSH_USER }}/mylorry/
          strip_components: 0

      # Update .env on the server (we save the secret somewhere)
      - name: Write .env on server
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -e
            cd /home/${{ secrets.SSH_USER }}/mylorry
            cat > .env << 'EOF'
            ${{ secrets.APP_ENV_FILE }}
            EOF

      # Login to GHCR on the server to be able to pull
      - name: Docker login GHCR on server
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            echo ${{ secrets.GHCR_TOKEN }} | docker login ghcr.io -u ${{ secrets.GHCR_USERNAME }} --password-stdin

      # Pull Ùˆ Up
      - name: Deploy stack
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -e
            cd /home/${{ secrets.SSH_USER }}/mylorry
            # If the original compose file is on the server:
            if [ -f docker-compose.yml ]; then
              COMPOSE_FILE=docker-compose.yml
            else
              # Optionally, name the uploaded file docker-compose.deploy.yml
              COMPOSE_FILE=docker-compose.deploy.yml
            fi
            docker compose -f $COMPOSE_FILE pull
            docker compose -f $COMPOSE_FILE up -d --remove-orphans
            docker system prune -f
